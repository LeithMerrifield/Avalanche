using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Movement : MonoBehaviour
{
    public int maxJumps;
    public float jumpHeight;
    public float speed;
    public CharacterState myState;

    private int jump;
    private bool timercheck = false;

    private float rayLength = .3f;
    private float rayLengthDown = .52f;
    private Rigidbody body;
    private bool telecheck = false;

    //the states the player can be in
    public enum CharacterState
    {
        GROUNDED,
        JUMPING,
        WALLGRABRIGHT,
        WALLGRABLEFT
    }

    // Start is called before the first frame update, or on creation of the object
    void Start()
    {
        myState = CharacterState.GROUNDED;
        body = GetComponent<Rigidbody>();
    }

    //the timeout that happens after jumping from a wall
    IEnumerator WallJumpTimer(float time)
    {
        yield return new WaitForSeconds(time);
        timercheck = false;
    }

    // Update is called once per frame and is used for physics updates
    void FixedUpdate()
    {
        Raycasts();
        TeleWallRaycast();

        switch (myState)
        {
            case CharacterState.JUMPING:
                {
                    JumpingMovement();
                    break;
                }
            case CharacterState.WALLGRABRIGHT:
                {
                    WallGrabMovement(true);
                    break;
                }
            case CharacterState.WALLGRABLEFT:
                {
                    WallGrabMovement(false);
                    break;
                }
            case CharacterState.GROUNDED:
                {
                    GroundedMovement();
                    break;
                }
        }
    }
    
    //somewhere to put the messing looking raycasts
    private void Raycasts()
    {
        bool grabbingCheck = false;

        Vector3 topRight = new Vector3(transform.position.x, transform.position.y + .45f, transform.position.z);
        Vector3 topLeft = new Vector3(transform.position.x, transform.position.y + .45f, transform.position.z);
        Vector3 bottomRight = new Vector3(transform.position.x, transform.position.y - .45f, transform.position.z);
        Vector3 bottomLeft = new Vector3(transform.position.x, transform.position.y - .45f, transform.position.z);
        Vector3 downLeft = new Vector3(transform.position.x + -.2f, transform.position.y, transform.position.z);
        Vector3 downRight = new Vector3(transform.position.x + .2f, transform.position.y, transform.position.z);

        Vector3 right = transform.TransformDirection(new Vector3(rayLength, 0f, 0f));
        Vector3 left = transform.TransformDirection(new Vector3(-rayLength, 0f, 0f));
        Vector3 down = transform.TransformDirection(new Vector3(0f, -rayLengthDown, 0f));

        RaycastHit HitLeft;
        RaycastHit HitRight;

        Ray leftRay = new Ray(transform.position, left);
        Ray rightRay = new Ray(transform.position, right);

        Debug.DrawRay(bottomLeft, left, Color.green);
        Debug.DrawRay(topLeft, left, Color.green);
        Debug.DrawRay(transform.position, left, Color.green);

        Debug.DrawRay(bottomRight, right, Color.green);
        Debug.DrawRay(topRight, right, Color.green);
        Debug.DrawRay(transform.position, right, Color.green);

        if (Physics.Raycast(downLeft, down, rayLengthDown) || 
            Physics.Raycast(downRight, down, rayLengthDown))
        {
            myState = CharacterState.GROUNDED;
            return;
        }


        if (Physics.Raycast(bottomRight, right, rayLength) ||
            (Physics.Raycast(transform.position, right, rayLength)) ||
            (Physics.Raycast(topRight, right, rayLength)))
        {
            if (Physics.Raycast(rightRay, out HitRight, rayLength))
                if (HitRight.collider.tag == "Wall")
                    return;

             myState = CharacterState.WALLGRABRIGHT;
        }
        else
        {
            grabbingCheck = true;
        }

        if ((Physics.Raycast(bottomLeft, left, rayLength) ||
            Physics.Raycast(topLeft, left, rayLength)) ||
            Physics.Raycast(transform.position, left, rayLength))
        {
            if (Physics.Raycast(leftRay, out HitLeft, rayLength))
                if (HitLeft.collider.tag == "Wall")
                    return;

            myState = CharacterState.WALLGRABLEFT;
        }
        else
        {
            if(grabbingCheck && myState != CharacterState.GROUNDED)
            {
                myState = CharacterState.JUMPING;
            }
        }
    }

    private void TeleWallRaycast()
    {
        RaycastHit HitLeft;
        RaycastHit HitRight;

        Vector3 left = transform.TransformDirection(new Vector3(-rayLength, 0f, 0f));
        Vector3 right = transform.TransformDirection(new Vector3(rayLength, 0f, 0f));
        Ray leftRay = new Ray(transform.position, left);
        Ray rightRay = new Ray(transform.position, right);


        if (Physics.Raycast(leftRay, out HitLeft, rayLength))
        {
            if (HitLeft.collider.tag == "Wall")
            {
                if(!(body.position.x > 0f))
                {
                    body.position = new Vector3(-(HitLeft.transform.position.x) - .5f, body.position.y, body.velocity.z);
                }
            }
        }
        else if (Physics.Raycast(rightRay, out HitRight, rayLength))
        {
            if (HitRight.collider.tag == "Wall" && timercheck != true)
            {
                if (!(body.position.x < 0f))
                {
                    body.position = new Vector3(-(HitRight.transform.position.x) + .5f, body.position.y, body.velocity.z);
                }
            }
        }

    }

    //if players state is jumping then these are the movemnts that will run
    public void JumpingMovement()
    {

        if (Input.GetKey("a") && timercheck != true)
        {
            var amount = -speed * Time.deltaTime * 100f;


            if (!(body.velocity.x < -5f))
            {
                body.AddForce(amount * 7F, body.velocity.y, 0.0f, ForceMode.Force);
            }
        }

        if (Input.GetKey("d") && timercheck != true)
        {
            var amount = speed * Time.deltaTime * 100f;
            //var temp = body;
            //temp.velocity = new Vector3(amount, body.velocity.y, 0f);

            //body.velocity = new Vector3(amount, body.velocity.y, 0f);

            if(!(body.velocity.x > 5f))
            { 
                body.AddForce(amount * 7F, body.velocity.y, 0.0f, ForceMode.Force);
            }
        }
    }

    //if the player is touch a wall then these are the movements that will happen, depending on the side touching the jump will change
    public void WallGrabMovement(bool direction) //true = right, false = left
    {
        jump = 0;
        if (direction)
        {
            //when the player is gripping using the right side
            if (Input.GetKey("space") && jump < maxJumps)
            {
                var amount = jumpHeight * Time.deltaTime * 100.0f;

                if (!(body.velocity.y > jumpHeight))
                {
                    body.AddForce(-6.0f, amount * 1.2f, 0.0f, ForceMode.Impulse);
                }
                myState = CharacterState.JUMPING;
                jump++;
                timercheck = true;
                StartCoroutine(WallJumpTimer(.1f));
            }
            if (Input.GetKey("d"))
            {
                var amount = -1 * Time.deltaTime * 75f;
                body.velocity = new Vector3(0f, amount, 0f);
            }
        }
        else
        {
            if (Input.GetKey("space") && jump < maxJumps)
            {
                var amount = jumpHeight * Time.deltaTime * 100.0f;
                if (!(body.velocity.y > jumpHeight))
                {
                    body.AddForce(6.0f, amount * 1.2f, 0.0f, ForceMode.Impulse);
                }
                myState = CharacterState.JUMPING;
                jump++;
                timercheck = true;
                StartCoroutine(WallJumpTimer(.1f));
            }
            if (Input.GetKey("a"))
            {
                var amount = -1 * Time.deltaTime * 75f;
                body.velocity = new Vector3(0f, amount, 0f);
            }
        }
    }

    //default movement that runs
    public void GroundedMovement()
    {
        if (Input.GetKey("d"))
        {
            var amount = speed * Time.deltaTime * 100.0f;
            body.velocity = new Vector3(amount, body.velocity.y, 0f);

        }
        if (Input.GetKey("a"))
        {
            var amount = -speed * Time.deltaTime * 100.0f;
            body.velocity = new Vector3(amount, body.velocity.y, 0f);

        }
        if (Input.GetKey("space") && jump < maxJumps)
        {
            var amount = jumpHeight * Time.deltaTime * 100.0f;
            body.AddForce(0.0f, amount, 0.0f, ForceMode.Impulse);
            myState = CharacterState.JUMPING;
            jump++;

        }
    }

    //resets the jump count to 0 aslong as the player is colliding with something
    public void OnCollisionStay(Collision collision)
    {
        jump = 0;
    }
}

